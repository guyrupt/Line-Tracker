
AIDS3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e5  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036d  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f6  00000000  00000000  00001a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7ADCReadi>:
			
		}
	}
}
uint16_t ADCRead(const int channel) {
	ADMUX = 0b01000000;
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 e4       	ldi	r25, 0x40	; 64
  86:	90 83       	st	Z, r25
	ADMUX |= channel;
  88:	90 81       	ld	r25, Z
  8a:	89 2b       	or	r24, r25
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC) | (1<<ADIF);
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 65       	ori	r24, 0x50	; 80
  96:	80 83       	st	Z, r24
	while ( (ADCSRA & (1<<ADIF)) == 0);
  98:	80 81       	ld	r24, Z
  9a:	84 ff       	sbrs	r24, 4
  9c:	fd cf       	rjmp	.-6      	; 0x98 <_Z7ADCReadi+0x18>
	ADCSRA &= ~(1<<ADSC);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8f 7b       	andi	r24, 0xBF	; 191
  a6:	80 83       	st	Z, r24
	return ADC;
  a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  b0:	08 95       	ret

000000b2 <main>:
#include <stdlib.h>
#include <string.h>
uint16_t ADCRead(const int);
void USART_putstring(char* StringPtr);
int main(void){
	CLKPR=0b10000000;
  b2:	e1 e6       	ldi	r30, 0x61	; 97
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
	CLKPR=0b00000000;
  ba:	10 82       	st	Z, r1
	DDRC = 0;
  bc:	17 b8       	out	0x07, r1	; 7
	DDRD=0xFF; // PORTD as output
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
	DDRB=0xFF;
  c2:	84 b9       	out	0x04, r24	; 4
	TCCR0A=0b10100011; // phase correct PWM
  c4:	93 ea       	ldi	r25, 0xA3	; 163
  c6:	94 bd       	out	0x24, r25	; 36
	TCCR0B=0b00000010; // timer
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	85 bd       	out	0x25, r24	; 37
	TCCR2A=0b10100011; // phase correct PWM
  cc:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B=0b00000010; // timer
  d0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	ADCSRA |= (1<<ADEN);
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	unsigned int BaudR = 9600;
	unsigned int ubrr = (F_CPU / (BaudR*16UL))-1;
	UBRR0H = (unsigned char)(ubrr>>8);
  de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  e2:	83 e3       	ldi	r24, 0x33	; 51
  e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  e8:	e2 ec       	ldi	r30, 0xC2	; 194
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0);
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
			
		}
		else if(AAA>500)
		{
			
			OCR0B=238; // 20% duty cycle
  fc:	1e ee       	ldi	r17, 0xEE	; 238
			
			OCR2B=55; // 20% duty cycle
  fe:	c4 eb       	ldi	r28, 0xB4	; 180
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	0f 2e       	mov	r0, r31
 104:	f7 e3       	ldi	r31, 0x37	; 55
 106:	3f 2e       	mov	r3, r31
 108:	f0 2d       	mov	r31, r0
			
		}
		else if(BBB>500)
		{
			
			OCR0B=60; // 20% duty cycle
 10a:	0f 2e       	mov	r0, r31
 10c:	fc e3       	ldi	r31, 0x3C	; 60
 10e:	2f 2e       	mov	r2, r31
 110:	f0 2d       	mov	r31, r0

			OCR2B=255; // 20% duty cycle
 112:	0f ef       	ldi	r16, 0xFF	; 255
	UCSR0B |= (1<<TXEN0);
	while(1){
		float AAA = 0;
		float BBB = 0;
		float CCC=0;
		AAA = (float)ADCRead(1);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 40 00 	call	0x80	; 0x80 <_Z7ADCReadi>
 11c:	bc 01       	movw	r22, r24
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 13 01 	call	0x226	; 0x226 <__floatunsisf>
 126:	6b 01       	movw	r12, r22
 128:	7c 01       	movw	r14, r24
		BBB = (float)ADCRead(3);
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 40 00 	call	0x80	; 0x80 <_Z7ADCReadi>
 132:	bc 01       	movw	r22, r24
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 13 01 	call	0x226	; 0x226 <__floatunsisf>
 13c:	2b 01       	movw	r4, r22
 13e:	3c 01       	movw	r6, r24
		CCC = (float)ADCRead(2);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 40 00 	call	0x80	; 0x80 <_Z7ADCReadi>
 148:	bc 01       	movw	r22, r24
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 13 01 	call	0x226	; 0x226 <__floatunsisf>
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f ec       	ldi	r24, 0xCF	; 207
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xa8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xae>
 160:	00 00       	nop
		_delay_ms(1);
		
		if(CCC>500&&AAA<500&&BBB<500)
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	4a ef       	ldi	r20, 0xFA	; 250
 168:	53 e4       	ldi	r21, 0x43	; 67
 16a:	c5 01       	movw	r24, r10
 16c:	b4 01       	movw	r22, r8
 16e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	bc f4       	brge	.+46     	; 0x1a4 <main+0xf2>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	4a ef       	ldi	r20, 0xFA	; 250
 17c:	53 e4       	ldi	r21, 0x43	; 67
 17e:	c7 01       	movw	r24, r14
 180:	b6 01       	movw	r22, r12
 182:	0e 94 0e 01 	call	0x21c	; 0x21c <__cmpsf2>
 186:	88 23       	and	r24, r24
 188:	bc f4       	brge	.+46     	; 0x1b8 <main+0x106>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	4a ef       	ldi	r20, 0xFA	; 250
 190:	53 e4       	ldi	r21, 0x43	; 67
 192:	c3 01       	movw	r24, r6
 194:	b2 01       	movw	r22, r4
 196:	0e 94 0e 01 	call	0x21c	; 0x21c <__cmpsf2>
 19a:	88 23       	and	r24, r24
 19c:	6c f4       	brge	.+26     	; 0x1b8 <main+0x106>
		{
			OCR0B=238; // right ahead
 19e:	18 bd       	out	0x28, r17	; 40
			
			OCR2B=255; // left ahead
 1a0:	08 83       	st	Y, r16
 1a2:	b8 cf       	rjmp	.-144    	; 0x114 <main+0x62>
			
		}
		else if(CCC>500&&AAA>500&&BBB>500)
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	4a ef       	ldi	r20, 0xFA	; 250
 1aa:	53 e4       	ldi	r21, 0x43	; 67
 1ac:	c5 01       	movw	r24, r10
 1ae:	b4 01       	movw	r22, r8
 1b0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__gesf2>
 1b4:	18 16       	cp	r1, r24
 1b6:	bc f4       	brge	.+46     	; 0x1e6 <main+0x134>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	4a ef       	ldi	r20, 0xFA	; 250
 1be:	53 e4       	ldi	r21, 0x43	; 67
 1c0:	c7 01       	movw	r24, r14
 1c2:	b6 01       	movw	r22, r12
 1c4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__gesf2>
 1c8:	18 16       	cp	r1, r24
 1ca:	6c f4       	brge	.+26     	; 0x1e6 <main+0x134>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	4a ef       	ldi	r20, 0xFA	; 250
 1d2:	53 e4       	ldi	r21, 0x43	; 67
 1d4:	c3 01       	movw	r24, r6
 1d6:	b2 01       	movw	r22, r4
 1d8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__gesf2>
 1dc:	18 16       	cp	r1, r24
 1de:	6c f4       	brge	.+26     	; 0x1fa <main+0x148>
		{
			OCR0B=238; // right ahead
 1e0:	18 bd       	out	0x28, r17	; 40
			
			OCR2B=255; // left ahead
 1e2:	08 83       	st	Y, r16
 1e4:	97 cf       	rjmp	.-210    	; 0x114 <main+0x62>
			
		}
		else if(AAA>500)
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	4a ef       	ldi	r20, 0xFA	; 250
 1ec:	53 e4       	ldi	r21, 0x43	; 67
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__gesf2>
 1f6:	18 16       	cp	r1, r24
 1f8:	1c f4       	brge	.+6      	; 0x200 <main+0x14e>
		{
			
			OCR0B=238; // 20% duty cycle
 1fa:	18 bd       	out	0x28, r17	; 40
			
			OCR2B=55; // 20% duty cycle
 1fc:	38 82       	st	Y, r3
 1fe:	8a cf       	rjmp	.-236    	; 0x114 <main+0x62>
			
		}
		else if(BBB>500)
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4a ef       	ldi	r20, 0xFA	; 250
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	c3 01       	movw	r24, r6
 20a:	b2 01       	movw	r22, r4
 20c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__gesf2>
 210:	18 16       	cp	r1, r24
 212:	0c f0       	brlt	.+2      	; 0x216 <main+0x164>
 214:	7f cf       	rjmp	.-258    	; 0x114 <main+0x62>
		{
			
			OCR0B=60; // 20% duty cycle
 216:	28 bc       	out	0x28, r2	; 40

			OCR2B=255; // 20% duty cycle
 218:	08 83       	st	Y, r16
 21a:	7c cf       	rjmp	.-264    	; 0x114 <main+0x62>

0000021c <__cmpsf2>:
 21c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__fp_cmp>
 220:	08 f4       	brcc	.+2      	; 0x224 <__cmpsf2+0x8>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	08 95       	ret

00000226 <__floatunsisf>:
 226:	e8 94       	clt
 228:	09 c0       	rjmp	.+18     	; 0x23c <__floatsisf+0x12>

0000022a <__floatsisf>:
 22a:	97 fb       	bst	r25, 7
 22c:	3e f4       	brtc	.+14     	; 0x23c <__floatsisf+0x12>
 22e:	90 95       	com	r25
 230:	80 95       	com	r24
 232:	70 95       	com	r23
 234:	61 95       	neg	r22
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	8f 4f       	sbci	r24, 0xFF	; 255
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	99 23       	and	r25, r25
 23e:	a9 f0       	breq	.+42     	; 0x26a <__floatsisf+0x40>
 240:	f9 2f       	mov	r31, r25
 242:	96 e9       	ldi	r25, 0x96	; 150
 244:	bb 27       	eor	r27, r27
 246:	93 95       	inc	r25
 248:	f6 95       	lsr	r31
 24a:	87 95       	ror	r24
 24c:	77 95       	ror	r23
 24e:	67 95       	ror	r22
 250:	b7 95       	ror	r27
 252:	f1 11       	cpse	r31, r1
 254:	f8 cf       	rjmp	.-16     	; 0x246 <__floatsisf+0x1c>
 256:	fa f4       	brpl	.+62     	; 0x296 <__floatsisf+0x6c>
 258:	bb 0f       	add	r27, r27
 25a:	11 f4       	brne	.+4      	; 0x260 <__floatsisf+0x36>
 25c:	60 ff       	sbrs	r22, 0
 25e:	1b c0       	rjmp	.+54     	; 0x296 <__floatsisf+0x6c>
 260:	6f 5f       	subi	r22, 0xFF	; 255
 262:	7f 4f       	sbci	r23, 0xFF	; 255
 264:	8f 4f       	sbci	r24, 0xFF	; 255
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	16 c0       	rjmp	.+44     	; 0x296 <__floatsisf+0x6c>
 26a:	88 23       	and	r24, r24
 26c:	11 f0       	breq	.+4      	; 0x272 <__floatsisf+0x48>
 26e:	96 e9       	ldi	r25, 0x96	; 150
 270:	11 c0       	rjmp	.+34     	; 0x294 <__floatsisf+0x6a>
 272:	77 23       	and	r23, r23
 274:	21 f0       	breq	.+8      	; 0x27e <__floatsisf+0x54>
 276:	9e e8       	ldi	r25, 0x8E	; 142
 278:	87 2f       	mov	r24, r23
 27a:	76 2f       	mov	r23, r22
 27c:	05 c0       	rjmp	.+10     	; 0x288 <__floatsisf+0x5e>
 27e:	66 23       	and	r22, r22
 280:	71 f0       	breq	.+28     	; 0x29e <__floatsisf+0x74>
 282:	96 e8       	ldi	r25, 0x86	; 134
 284:	86 2f       	mov	r24, r22
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	2a f0       	brmi	.+10     	; 0x296 <__floatsisf+0x6c>
 28c:	9a 95       	dec	r25
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	88 1f       	adc	r24, r24
 294:	da f7       	brpl	.-10     	; 0x28c <__floatsisf+0x62>
 296:	88 0f       	add	r24, r24
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	97 f9       	bld	r25, 7
 29e:	08 95       	ret

000002a0 <__fp_cmp>:
 2a0:	99 0f       	add	r25, r25
 2a2:	00 08       	sbc	r0, r0
 2a4:	55 0f       	add	r21, r21
 2a6:	aa 0b       	sbc	r26, r26
 2a8:	e0 e8       	ldi	r30, 0x80	; 128
 2aa:	fe ef       	ldi	r31, 0xFE	; 254
 2ac:	16 16       	cp	r1, r22
 2ae:	17 06       	cpc	r1, r23
 2b0:	e8 07       	cpc	r30, r24
 2b2:	f9 07       	cpc	r31, r25
 2b4:	c0 f0       	brcs	.+48     	; 0x2e6 <__fp_cmp+0x46>
 2b6:	12 16       	cp	r1, r18
 2b8:	13 06       	cpc	r1, r19
 2ba:	e4 07       	cpc	r30, r20
 2bc:	f5 07       	cpc	r31, r21
 2be:	98 f0       	brcs	.+38     	; 0x2e6 <__fp_cmp+0x46>
 2c0:	62 1b       	sub	r22, r18
 2c2:	73 0b       	sbc	r23, r19
 2c4:	84 0b       	sbc	r24, r20
 2c6:	95 0b       	sbc	r25, r21
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <__fp_cmp+0x38>
 2ca:	0a 26       	eor	r0, r26
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <__fp_cmp+0x46>
 2ce:	23 2b       	or	r18, r19
 2d0:	24 2b       	or	r18, r20
 2d2:	25 2b       	or	r18, r21
 2d4:	21 f4       	brne	.+8      	; 0x2de <__fp_cmp+0x3e>
 2d6:	08 95       	ret
 2d8:	0a 26       	eor	r0, r26
 2da:	09 f4       	brne	.+2      	; 0x2de <__fp_cmp+0x3e>
 2dc:	a1 40       	sbci	r26, 0x01	; 1
 2de:	a6 95       	lsr	r26
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	81 1d       	adc	r24, r1
 2e4:	81 1d       	adc	r24, r1
 2e6:	08 95       	ret

000002e8 <__gesf2>:
 2e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__fp_cmp>
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <__gesf2+0x8>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
